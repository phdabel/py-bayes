A Teoria da complexidade computacional é a parte da teoria da computação que estuda os recursos necessários durante o cálculo para resolver um problema. O termo foi criado pelo Juris Hartmanis e Richard Stearns{ref|1}. Os recursos comumente estudados são o tempo (número de passos de execução de um algoritmo para resolver um problema) e o espaço (quantidade de memória utilizada para resolver um problema). Pode-se estudar igualmente outros parâmetros, tais como o número de processadores necessários para resolver o problema em paralelo. A teoria da complexidade difere da teoria da computabilidade a qual se ocupa de factibilidade de se solucionar um problema como algoritmos efetivos sem levar em conta os recursos necessários para ele.Os problemas que têm uma solução com ordem de complexidade linear são os problemas que se resolvem em um tempo que se relaciona linearmente com seu tamanho.Hoje em dia as máquinas resolvem com eficiencia problemas mediante algoritmos que têm como máximo uma complexidade ou custo computacional polinômico, significa dizer que, a relação entre o tamanho do problema e seu tempo de execução é polinômico. Os problemas com custo fatorial ou combinatório estão agrupados em NP. Estes problemas não têm  uma solução prática, significa dizer quer, uma máquina não pode resolver-los em um tempo razoável.A importância da complexidade pode ser observada no exemplo abaixo, que mostra 5 algoritmos A1 a A5   para resolver um mesmo problema, de complexidades diferentes. Supomos que uma operação leva 1 milisegundo para ser efetuada. A tabela seguinte dá o tempo necessário por cada um dos algoritmos.Tk(n) é a complexidade do algoritmo.A complexidade do tempo de um problema é o número de passos que se toma para resolver uma instância de um problema, a partir do tamanho da entrada utilizando o algoritmo mais eficiente à disposição. Intuitivamente, caso se tome uma instância com entrada de longitude n que pode resolver-se em n² passos, se diz que esse problema tem uma complexidade em tempo de n².  Supostamente, o número exato de passos depende da máquina em que se programa, da linguagem utilizada e de outros fatores. Para não ter que falar do custo exato de um cálculo se utiliza a notacão assimptótica.  Quando um problema tem custo dado em tempo O(n²) em uma configuração de computador e linguagem, este custo será o mesmo em todos os computadores, de maneira que esta notação generaliza a noção de custo independentemente do equipamento utilizado.São usadas três perspectivas no estudo do caso da complexidade: